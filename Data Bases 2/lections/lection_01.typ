= Лекция 1: Принципы распределенных данных. [ТРЕБУЕТ ДОРАБОТКИ]

== Организационные моменты

=== Материалы

Всё по старому хранится на canvas-e. Даже ссылка не поменялась, просто предмет в нём переименовался.

=== Оценка

По-прежнему, анти автомат (max 80%)

Финальная оценка = Накоп * 0.7 + экзамен * 0.3

Накопленная оценка (0..10):
Работа на семинарах: 30%
Групповой проект: 30%
Коллоквиум/контрольная/midterm: 20%
Essay: 20%

Exam waiver policy (автомат):

*final score = min(cumulative 8), if cumulative > 5.5*

=== Анекдот
Можно будет использовать ИИ в части некоторых задач, дальше подробнее расскажут. Анекдот в тему:

```
Пришёл преподаватель на лекцию, и надоело ему рассказывать предмет свой. Спрашивается, зачем я буду 5 раз подряд рассказывать одно и то же, поставил магнитофон с записанной лекцией и ушёл. К концу пары возвращается и видит, как вместо студентов стоит куча маленьких диктофончиков...
```
== Содержание курса

+ Модуль 1 -- Фундамент распределенных систем
  + *Принципы распределенных систем.* Горизонтальное масштабирование. Шардирование (алгоритмы, rebalancing). Репликация (single-leader, multi-leader, leaderless).
  + *Модели консистентности и времени.* От ACID к BASE. Линеаризируемость, последовательная и причинная консистентность. Eventual Consistency. Теорема CAP и её современные интерпретации (PACELC).
  + *Алгоритмы консенсуса.* Проблема двух генералов. Концептуальный разбор Paxos и Raft. Роль ZooKeeper/etcd в распределенных системах.
  + *Архитектура распределенных `NoSQL`/`NewSQL`.* LSM-Trees vs B-trees. Wide-Column (Cassandra). *Сравнение:* Cassandra (Eventual Consistency) vs Yandex Database (Строгая косистентность, HTAP).
  В реляционной БД мы делаем, чтоб в ней были объекты из предметной области (Человек бегает, у него пульс такой, скорость такая, пробежки такие, и.т.д.)

  `Я вот хочу найти всех людей, что они из разных стран, но у них было 3 пробежки, что они встречались. Причём не всё время, а какое-то время (Мол они -- шпионы)`. В реляционных базах данных так легко сделать. А в Cassandra так не получится. Для отдельного запроса условно нужно будет сделать отдельную таблицу для запроса.
+ Модуль 2 -- Инженерия хранилищ данных (Data Warehousing)
  + *Классика DWH: Методология Кимбалла.* Схема "звезда" и "снежинка". Факты, измерения. Типы Slowly Changing Dimensions (SCD).
  + *Современное моделирование: Data Valut 2.0.* Hub, Link, Satellite. Приемущества для гибкости и аудируемости. Сравнение с ЗНФ и схемой "звезда".
  + *ETL/ELT и качество данных.* Проектирование пайплайнов очистки, трансформации. *Современные инструменты: dbt.*
  + *Архитектура Data Lake и Lakehouse. Облачные DWH (Snowflake).* Разделение storage/compute. Форматы (Parquet). Альтернативные экосистемы (YTsaurus).
// TODO
+ Модуль 3 -- Пакетная и потоковая обработка данных.
  + *Пакетная обработка с Apache Spark.* Архитектура (Driver, Executor). DataFrame API, Spark SQL. Ленивые вычисдения Catalyst Optimizer.
  + *Оптимизация Spark-джоб.* Анализ плана выполнения
  + *Архитектура потоковой обработки и Apache Kafka.*
  + *Потоковая обработка с Apache Flink.* Модель Dataflow. State management, windowing. Гарантии обработки (at-least-once, exactly-once).
+ Модуль 4 -- Специализированные аналитические системы
  + Архитектура MPP и колоночных OLAP-СУБД. Классика: Greenplum. Современный Open-Source: ClickHouse.
  + Real-time Analytical & In-Memory Databases. 
  + 
  + Синтез архитектурных паттернов


( Про Кибалловскую идеалогию)
Это решается только расстрелами. Есть такая американская сеть Walmart, она главный конкурент ozon, сильно популярнее его была одно время. У него сидел отдел, чтобы агрегировать, кто где что продаёт, чтоб людям было удобно покупать (в 1990). Ему продали идею, мол давайте сделаем хранилище данных, чтобы сделали и можно было удобно видеть. Но делать буду пару лет. Есть риск, что делать буду. Если через 2 года узнается, что хоть что-то поменяли, то я вас уволю, если хоть что-то поменяете Вот сейчас расскажете что да как сейчас. Будете делать change request, что там поменять надо, а так нельзя. И вот это сработало. Но если не было политической воли руководства, то такое не прокатывало. 

Партиционирование и репликация
== План лекции

+
+
+
+

== Горизонтальное масштабирование

Sheard-nothing: Всё своё в каждом из узлов. Если они с

Taradata (У кого получилось. Они уже 40 лет существуют, используются в банках, проприетарно, жутко дорого.)

Как делить людей по узлам?

=== Стратегия 1: по диапазону ключей ()



=== Стратегия 2: по хэшу ключа (Hash Partitioning)

Плюсы: Равномерное распределение данных и нагрузки.

Минусы: Неэффективные range scans, сложная перебалансировка (чтоб освободить данные с одного узла на другой)

// TODO: Неужели нельзя хэшировать но с возможностью перебалансировки?

=== Терминология

В документации часто Партиционирование == Секционирование. Это всё равно всё происходит на 1 узле.

#figure(
  table(
    columns: (auto, auto, auto, auto),
    [Термин], [Контекст /], [], [],
    [],[],[],[],
    [Распределение (Dustrubution)], [MPP-системы (Greenplum)], [Распределение строк таблицы по разным узлам (сегментам). Выбирается ключ распределения (DISTRIBUTED by hash(key))], [*Сегмент* (Segment)],
    [Шардирование],[],[],[]
  )
)

=== Продвинутые стратегии партиционирования

+ Гео-партиционирование (Get-partitioning) (по стране)

+ Иерархическое (комбинированное) партиционирование
  - Идея: Комбинация нескольких стратегий. 
  - *Пример (YDB)*:

=== Репликация

+ *Доступность (High Availability):* переживём отказ узла
+ *Масштабируемость чтения (Read Scalability):* Распределяем запросы на чтение.
+ *Низкая задержка (Low Latency):* Размещаем данные ближе к пользователям.

*Главная проблема:* Как поддерживать согласнованность между пользователями?

*Репликация: не только точные копии*.

Коды для восстановления при ошибках (Erasure Codes), например, Рида-Соломона.
- *Свойство:* Система может... // TODO:
- 

== Подходы для выбора лидера, при репликации данных

=== Single-leader

Плюсы -- всё понятно, остаётся согласованность данных.


Минус -- ничего не понятно:
- как перевыбирать лидера
- А если он упал, а он не упал?
- Как понять что он упал?

=== Multi-leader

=== Leaderless
Число реплки $= N$

Квроум на запись $= W$

Кворум на чтение = $R$
+ Правило кворума: $W + R > N =>$ Гарантия чтения актуальных данных

== Про групповой проект:

2 источника

Поток геолокаций

Изменяющаяся база данных

Будет 4 этапа.

+ DWH (Сделать хранилище данных, куда всё будет складываться)
+ Написать код помещения данных.
+ Построение витрин и Stream-пайплайна
  Вариант A: Batch-витрина для BI-аналитики
  Вариант Б: Real-time витрина для оперативного мониторинга
+ Финальная защита 